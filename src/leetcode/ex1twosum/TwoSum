
/**
 *ex01: 两数之和问题
 * 给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。
 * 示例：
 *  给定 nums = [2, 7, 11, 15], target = 9
    因为 nums[0] + nums[1] = 2 + 7 = 9
    所以返回 [0, 1]
 */
 /**
  *
  *time O(N^2)
  *space O(1)
  */
 int[] twoSum(int[] arr,int target){
     for(int i=0;i<arr.length-1;i++){
         for(int j=i+1;j<arr.length;j++){
             if( arr[j] == (target-arr[i]) ){
                 return new int[]{i,j};
             }
         }
     }
     throw new IllegalArgumentException("No two sum solution");
 }
 /**
  *
  *time O(N)
  *space O(N)
  */
  int[] twoSumByTwiceHash(int[] arr,int target){
       Map<Integer,Integer> map = new HashMap<>();
       for(int i=0;i<arr.length;i++){
           map.put(arr[i],i);
       }
       for(int i=0;i<arr.length;i++){
           int targetElement = target - arr[i];
           if(map.containsKey(targetElement) && map.get(targetElement)!=i){
               return new int[]{i,map.get(targetElement)};
           }
       }
       throw new IllegalArgumentException("No two sum solution");
  }
  /**
   *time O(N)
   *space O(N)
   */
   int[] twosumByOnceHash(int arr[],int target){
       Map<Integer,Integer> map = new HashMap<>();
       for(int i=0;i<arr.length;i++){
           int targetElement = target - arr[i];
           if(map.containsKey(targetElement)){
               return new int[]{i,map.get(targetElement)};
           }
           map.put(targetElement,i);
       }
       throw new IllegalArgumentException("not two sum solution");
   }